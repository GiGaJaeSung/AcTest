name: Full Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  frontend:
    name: Deploy Frontend to S3
    runs-on: ubuntu-latest

    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci
        working-directory: sciq-fe

      - name: Build frontend
        run: npx vite build
        working-directory: sciq-fe

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: sciq-fe/dist

  backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: frontend

    steps:
      - name: Checkout backend code
        uses: actions/checkout@v3

      - name: Set up JDK for Spring Boot
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build backend JAR
        run: ./gradlew clean bootJar
        working-directory: sciq-be

      - name: Zip JAR
        run: zip -j sciq-be.zip build/libs/*.jar
        working-directory: sciq-be

      - name: Copy to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "sciq-be/sciq-be.zip"
          target: "~/"

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Clean up old files
            rm -rf ~/sciq-be
            rm -f ~/sciq-be.zip
            
            # Create directory and unzip
            mkdir -p ~/sciq-be
            mv sciq-be/sciq-be.zip ~/sciq-be.zip
            cd ~/sciq-be
            unzip -o ../sciq-be.zip
            
            # Debug: List contents
            echo "Current directory contents:"
            ls -la
            
            echo "Creating docker-compose.yml with proper environment variables"
            cat << 'EOF' > docker-compose.yml
            version: "3.8"
            services:
              app:
                image: eclipse-temurin:17-jre
                container_name: sciq-backend
                ports:
                  - "8080:8080"
                volumes:
                  - ./app.jar:/app.jar
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/sciq
                  - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
                  - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
                  - JWT_SECRET=${JWT_SECRET}
                command: ["java", "-jar", "/app.jar"]
                depends_on:
                  - db
                restart: always
              db:
                image: mysql:8.0
                container_name: sciq-mysql
                environment:
                  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                  MYSQL_DATABASE: sciq
                  MYSQL_USER: ${MYSQL_USER}
                  MYSQL_PASSWORD: ${MYSQL_PASSWORD}
                ports:
                  - "3306:3306"
                volumes:
                  - mysql-data:/var/lib/mysql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
            volumes:
              mysql-data:
            EOF
            
            # Export environment variables
            export MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
            export MYSQL_USER='${{ secrets.MYSQL_USER }}'
            export MYSQL_PASSWORD='${{ secrets.MYSQL_PASSWORD }}'
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'
            
            # Replace environment variables in docker-compose.yml
            envsubst < docker-compose.yml > docker-compose.tmp
            mv docker-compose.tmp docker-compose.yml
            
            # Stop and remove existing containers
            sudo docker-compose down
            sudo docker stop sciq-mysql sciq-backend || true
            sudo docker rm sciq-mysql sciq-backend || true
            
            # Start services
            sudo docker-compose up -d
            
            # Show logs for debugging
            echo "Backend logs:"
            sudo docker logs sciq-backend
            echo "MySQL logs:"
            sudo docker logs sciq-mysql
